package com.example.songoption;

import java.io.IOException;
import java.util.Calendar;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ContentUris;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;

@SuppressLint("CutPasteId")
public class Player2 extends Activity {

    long[] audioId;
    String [] title;
    String [] artist;
    long[] duration;
    long startTime = 0;
    int counter;
    double percent;
    TextView timerTextView;
    private int currentTrack = 0; 
    static MediaPlayer mediaPlayer;
    static MediaPlayer mediaPlayer2;
    
    //Timer
    Handler timerHandler = new Handler();
    Runnable timerRunnable = new Runnable (){
            public void run(){
            long millis = System.currentTimeMillis() - startTime;
            int seconds = (int) (millis / 1000);
            int minutes = seconds / 60;
            seconds = seconds % 60;


           // timerHandler.postDelayed(this, 60000);
            }
    };
  
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            Log.e("Act3","in");
            
                
                Log.e("Act3","in2");
               
                this.requestWindowFeature(Window.FEATURE_NO_TITLE);
                this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
                
                setContentView(R.layout.songs);
                
                Log.e("Act3","passed");
        //Create an offset from the current time in which the alarm will go off.
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MINUTE, 1);
        //Create a new PendingIntent and add it to the AlarmManager
        Intent intent = new Intent(this, Player.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(this,
            12345, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        AlarmManager am = (AlarmManager)getSystemService(Activity.ALARM_SERVICE);
        am.set(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(),pendingIntent);
        
        /*
                Button pause = (Button) findViewById(R.id.button3);
                pause.setText("start");
                //Timer button implementation
                pause.setOnClickListener(new View.OnClickListener() {
                        
                        @Override
                        public void onClick(View v) 
                        {
                             Button pause = (Button) v;
                if (pause.getText().equals("stop")) {
                    timerHandler.removeCallbacks(timerRunnable);
                    pause.setText("start");
                } else {
                    startTime = System.currentTimeMillis();
                    //timerHandler.postDelayed(timerRunnable, 0);
                    pause.setText("stop");
                }
                        }
                });*/
                //Get the bundle
            Bundle bundle = getIntent().getExtras();
            //Extract the dataâ€¦
            String idList = bundle.getString("idList"); 
            int seekto= bundle.getInt("start");
            
            String[] proj1 = {MediaStore.Audio.Playlists.Members.TITLE, MediaStore.Audio.Playlists.Members.ARTIST, 
                    MediaStore.Audio.Playlists.Members.DURATION, "SourceId",MediaStore.Audio.Playlists.Members._ID};

        Uri songUri = Uri.parse("content://com.google.android.music.MusicContent/playlists/" + idList + "/members");
        Cursor songCursor = getContentResolver().query(songUri, proj1, null, null, null);
        int i =0;
        
        //Save all song information 
        if (songCursor.getCount() > 0) {
            songCursor.moveToFirst();
            
            audioId = new long [songCursor.getCount()];
            title = new String [songCursor.getCount()];
            artist = new String [songCursor.getCount()];
            duration = new long[songCursor.getCount()];
             
            do {
               audioId[i]=  songCursor.getLong(songCursor.getColumnIndex("SourceId"));
               String j =  String.valueOf(audioId[i]);
               Log.e("audioId",j);
               title[i]= songCursor.getString(0);
               
               artist[i]= songCursor.getString(1);
               duration[i] = songCursor.getLong(2);
               i++;
            } while (songCursor.moveToNext());
            
            songCursor.close();
            
            mediaPlayer = new MediaPlayer();
            
            mediaPlayer2 = new MediaPlayer();
            
         }
        
        String s =  String.valueOf(seekto);
        Log.e("seekBar",s);
     
        percent=  seekto * .01;
        
        s =  String.valueOf(percent);
        Log.e("seekBar",s);
        
          
        firstSong();
           
        }
    private void playSound(Context context) {
       
        try {
                mediaPlayer2.reset();
            final AudioManager audioManager = (AudioManager) context
                    .getSystemService(Context.AUDIO_SERVICE);
            if (audioManager.getStreamVolume(AudioManager.STREAM_ALARM) != 0) {
                mediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);
                mediaPlayer.prepare();
                mediaPlayer.start();                    
                mediaPlayer.setOnCompletionListener(new OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mp) {
                }});                       
            }
        } catch (IOException e) {
            System.out.println("OOPS");
        }
    }
        public void firstSong()
        {
                   try {
                         if (audioId[currentTrack] > 0) {
                             Uri contentUri = ContentUris.withAppendedId(android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, Long.valueOf(audioId[currentTrack]));
                                mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
                                mediaPlayer.setDataSource(this, contentUri);
                                mediaPlayer.prepareAsync();
                                mediaPlayer.setOnPreparedListener(new OnPreparedListener() {
                                        @Override
                                        public void onPrepared(MediaPlayer m) {
                                        	mediaPlayer.start(); 
                                        	mediaPlayer.setOnCompletionListener(new OnCompletionListener() {
                                                @Override
                                                public void onCompletion(MediaPlayer mp) {
                                                	nextSong();
                                                
                                            }});
                                        	Handler handler1 = new Handler();
                                        	handler1.postDelayed(timerRunnable, 60000);
                                        }
                                });
                            }
                        } catch (Exception e) {e.printStackTrace();}
        
        }
        

    //Get an alarm sound. Try for an alarm. If none set, try notification, 
    //Otherwise, ringtone.
    private Uri getAlarmUri() {
        Uri alert = RingtoneManager
                .getDefaultUri(RingtoneManager.TYPE_ALARM);
        if (alert == null) {
            alert = RingtoneManager
                    .getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            if (alert == null) {
                alert = RingtoneManager
                        .getDefaultUri(RingtoneManager.TYPE_RINGTONE);
            }
        }
        return alert;
    }

        public void buzzer()
        {
                try {
                Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
                Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
                r.play();
            } catch (Exception e) {}
        }
        public void nextSong() {
                mediaPlayer.reset();
                if(counter < 1){
                   
                //Log.e("MediaService Example", "Service Started media.. ");
            currentTrack = (currentTrack + 1) % title.length; 
            try {
            if (audioId[currentTrack] > 0) {
                Uri contentUri = ContentUris.withAppendedId(android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, Long.valueOf(audioId[currentTrack]));
                mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
                mediaPlayer.setDataSource(Player2.this, contentUri);
                mediaPlayer.prepareAsync();
                mediaPlayer.setOnPreparedListener(new OnPreparedListener() {
                        @Override
                        public void onPrepared(MediaPlayer mediaPlayer)
                        { 
                                mediaPlayer.start();
                                mediaPlayer.setOnCompletionListener(new OnCompletionListener() {
                                    @Override
                                    public void onCompletion(MediaPlayer mp) {
                                    	nextSong();
                                    
                                }});
                        }
                 });
             }} catch (Exception e) {e.printStackTrace();}       
             }        
        }  
}
